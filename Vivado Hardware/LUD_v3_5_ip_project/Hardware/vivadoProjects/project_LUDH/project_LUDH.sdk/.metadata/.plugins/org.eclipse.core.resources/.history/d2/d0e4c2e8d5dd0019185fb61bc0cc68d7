/******************************************************************************
*
* Copyright (C) 2009 - 2014 Xilinx, Inc.  All rights reserved.
*
* Permission is hereby granted, free of charge, to any person obtaining a copy
* of this software and associated documentation files (the "Software"), to deal
* in the Software without restriction, including without limitation the rights
* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
* copies of the Software, and to permit persons to whom the Software is
* furnished to do so, subject to the following conditions:
*
* The above copyright notice and this permission notice shall be included in
* all copies or substantial portions of the Software.
*
* Use of the Software is limited solely to applications:
* (a) running on a Xilinx device, or
* (b) that interact with a Xilinx device through a bus or interconnect.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
* XILINX  BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
* WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF
* OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
* SOFTWARE.
*
* Except as contained in this notice, the name of the Xilinx shall not be used
* in advertising or otherwise to promote the sale, use or other dealings in
* this Software without prior written authorization from Xilinx.
*
******************************************************************************/

/*
 * helloworld.c: simple test application
 *
 * This application configures UART 16550 to baud rate 9600.
 * PS7 UART (Zynq) is not initialized by this application, since
 * bootrom/bsp configures it to baud rate 115200
 *
 * ------------------------------------------------
 * | UART TYPE   BAUD RATE                        |
 * ------------------------------------------------
 *   uartns550   9600
 *   uartlite    Configurable only in HW design
 *   ps7_uart    115200 (configured by bootrom/bsp)
 */

#include <stdio.h>
#include "platform.h"
#include "xil_printf.h"
#include "ps7_init.h"
#include "xparameters.h"
#include "xil_io.h"
#include "xgpio.h"
#include "xstatus.h"

void delay(){
	int count = 100000000;
	for(int i=0;i<count;i++){
		i = i+1;
	}
}


int main()
{
    init_platform();
    ps7_post_config();

    int val = 981;
    int complete;
    int state = 0;
    int inst_counter = 0;
    XGpio start_gpio,reset_gpio,locked_gpio,state_gpio;

    xil_printf("------------------------------------New Run--------------------------------------\n\r");
    Xil_Out32(XPAR_GPIO_1_BASEADDR, 1); //Reset = 1
    //Xil_Out32(XPAR_GPIO_2_BASEADDR, 0); //Start = 0
    Xil_Out32(XPAR_GPIO_2_BASEADDR, 0); //Start1 = 0
    Xil_Out32(XPAR_GPIO_0_BASEADDR, 0); //Locked = 0
    delay();
    Xil_Out32(XPAR_GPIO_1_BASEADDR, 0); //Reset = 0
    Xil_Out32(XPAR_GPIO_0_BASEADDR, 1); //Locked = 1
    delay();

    //complete = Xil_In32(XPAR_GPIO_2_BASEADDR);
    //xil_printf("Start = %d\n\r",complete);


    /*int status;
    status = XGpio_Initialize(&start_gpio,XPAR_GPIO_2_DEVICE_ID);
    if(status != XST_SUCCESS){
    	xil_printf("Some problem in initializing GPIO\n\r");
    }
    XGpio_SetDataDirection(&start_gpio,1,0x00);

    status = XGpio_Initialize(&reset_gpio,XPAR_GPIO_1_DEVICE_ID);
    if(status != XST_SUCCESS){
        xil_printf("Some problem in initializing GPIO\n\r");
    }
    XGpio_SetDataDirection(&reset_gpio,1,0x00);

    status = XGpio_Initialize(&locked_gpio,XPAR_GPIO_0_DEVICE_ID);
    if(status != XST_SUCCESS){
        xil_printf("Some problem in initializing GPIO\n\r");
    }
    XGpio_SetDataDirection(&locked_gpio,1,0x00);

    status = XGpio_Initialize(&state_gpio,XPAR_GPIO_31_DEVICE_ID);
    if(status != XST_SUCCESS){
        xil_printf("Some problem in initializing GPIO\n\r");
    }
    XGpio_SetDataDirection(&state_gpio,1,0xff);*/


    /*XGpio_DiscreteWrite(&reset_gpio,1,1);
    XGpio_DiscreteWrite(&start_gpio,1,0);
    XGpio_DiscreteWrite(&locked_gpio,1,0);
    delay();
    XGpio_DiscreteWrite(&reset_gpio,1,0);
    XGpio_DiscreteWrite(&locked_gpio,1,1);
    delay();*/

    /*xil_printf("Before making START = 1\n\r");
    state = Xil_In32(XPAR_GPIO_31_BASEADDR);
    //state = XGpio_DiscreteRead(&state_gpio,1);
    xil_printf("Present State = %d\n\r",state);
    val = Xil_In32(XPAR_GPIO_33_BASEADDR);
    xil_printf("START = %d\n\r",val);
    val = Xil_In32(XPAR_GPIO_34_BASEADDR);
    xil_printf("SYNC_START = %d\n\r",val);

    //Making the start signal 1
    //XGpio_DiscreteWrite(&start_gpio,1,1);

    //Making the start signal 1
    //Xil_Out32(XPAR_GPIO_2_BASEADDR, 0x1); //Start = 1


    xil_printf("After making START = 1\n\r");
    state = Xil_In32(XPAR_GPIO_31_BASEADDR);
    //state = XGpio_DiscreteRead(&state_gpio,1);
    xil_printf("Present State = %d\n\r",state);

    val = Xil_In32(XPAR_GPIO_33_BASEADDR);
    xil_printf("START = %d\n\r",val);
    val = Xil_In32(XPAR_GPIO_34_BASEADDR);
    xil_printf("SYNC_START = %d\n\r",val);*/






    xil_printf("Before making START1 = 1\n\r");
    val = Xil_In32(XPAR_GPIO_33_BASEADDR);
    xil_printf("START1 = %d\n\r",val);
    val = Xil_In32(XPAR_GPIO_31_BASEADDR);
    xil_printf("Present State = %d\n\r",val);
    complete = Xil_In32(XPAR_GPIO_3_BASEADDR);
    xil_printf("Completed = %d\n\r",complete);

    //Making the start1 signal 1
    Xil_Out32(XPAR_GPIO_2_BASEADDR, 0x1); //Start1 = 1

    xil_printf("After making START1 = 1\n\r");
    val = Xil_In32(XPAR_GPIO_2_BASEADDR);
    xil_printf("START1 = %d\n\r",val);
    val = Xil_In32(XPAR_GPIO_31_BASEADDR);
    xil_printf("Present State = %d\n\r",val);
    complete = Xil_In32(XPAR_GPIO_3_BASEADDR);
    xil_printf("Completed = %d\n\r",complete);



    /*for(int i = 0;i<100;i++){
    Xil_Out32(XPAR_GPIO_2_BASEADDR + 4*i, 1);
    //xil_printf("After making START = %d\n\r",i);
    state = Xil_In32(XPAR_GPIO_31_BASEADDR);
    if(state != 3)
    	xil_printf("Present State = %d\n\r",state);
    }*/

    //complete = Xil_In32(XPAR_GPIO_2_BASEADDR);
    //xil_printf("Start = %d\n\r",complete);

    //Polling on completed signal
    /*complete = 0;
    while(complete != 1){
    	complete = Xil_In32(XPAR_GPIO_3_BASEADDR);
    	//xil_printf("Completed = %d\n\r",complete);
    	complete = complete & 0x1;
    	delay();
    }*/

    //xil_printf("Completed\n\r");

    /*for(int i=0;i<100;i++){
    val = Xil_In32(XPAR_BRAM_0_BASEADDR + 4*i);
    xil_printf("%d)Value = %d\n\r",i,val);
    }*/

    val = Xil_In32(XPAR_BRAM_3_BASEADDR + 4*1310);
    xil_printf("Value = %d\n\r",val);

    xil_printf("-----------------------------------Finish Run--------------------------------------\n\n\n\r");

    cleanup_platform();
    return 0;
}
